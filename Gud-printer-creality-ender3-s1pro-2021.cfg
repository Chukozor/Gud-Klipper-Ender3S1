# This file contains pin mappings for the stock 2021 Creality Ender 3
# S1 & S1 Pro. To use this config, check the STM32 Chip on the
# Mainboard, during "make menuconfig" select accordingly either the
# STM32F103 with "28KiB bootloader" or the STM32F401 with
# "64KiB bootloader" and serial (on USART1 PA10/PA9) for both.
# GUD : tu as la STM32F401
# donc les parametres a saisir sont :
# enable extra low level
# processor model STM32F401
# bootloader 64KiB
# clock reference 8 MHz
# communication interface serial on USART1 PA10/PA9
# baude rate serial port 250000

# For a direct serial connection, in "make menuconfig" select
# "Enable extra low-level configuration options" and  Serial
# (on USART2 PA3/PA2), which is on the 10 pin IDC cable used
# for the LCD module as follows: 3: Tx, 4: Rx, 9: GND, 10: VCC

# Flash this firmware by copying "out/klipper.bin" to a SD card and
# turning on the printer with the card inserted. The filename
# must be changed to "firmware.bin"

# With STM32F401, you might need to put "firmware.bin" in a
# folder on the SD card called "STM32F4_UPDATE" in order to flash.

# See docs/Config_Reference.md for a description of parameters.

[stepper_x]
step_pin: PC2
dir_pin: PB9
enable_pin: !PC3
microsteps: 16
rotation_distance: 40
endstop_pin: !PA5
position_endstop: 0
position_max: 259
position_min: 0
homing_speed: 50
# point min du bed X2
# position milieu : X120
# position max du lit : X237

[stepper_y]
step_pin: PB8
dir_pin: PB7
enable_pin: !PC3
microsteps: 16
rotation_distance: 40
endstop_pin: !PA6
position_endstop: 0
position_max: 247
position_min: 0
homing_speed: 50
# point min du bed Y9
# position milieu : Y127
# position max du lit : Y235

[stepper_z]
step_pin: PB6
dir_pin: !PB5
enable_pin: !PC3
microsteps: 16
rotation_distance: 8
endstop_pin: probe:z_virtual_endstop
position_max: 270
position_min: -4

[extruder]
step_pin: PB4
dir_pin: PB3
enable_pin: !PC3
microsteps: 16
gear_ratio: 42:12
rotation_distance: 26.359
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PA1
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC5
#control: pid
#pid_Kp: 18.511
#pid_Ki: 0.894
#pid_Kd: 95.793
min_temp: 0
max_temp: 260 # Set to 300 for S1 Pro

[heater_bed]
heater_pin: PA7
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC4
#control: pid
#pid_Kp: 68.385
#pid_Ki: 1.281
#pid_Kd: 912.935
min_temp: 0
max_temp: 100 # Set to 110 for S1 Pro

[heater_fan hotend_fan]
pin: PC0

[fan]
pin: PA0

[mcu]
serial: /dev/ttyUSB0
# A RENSEIGNER, ressemble a ca : serial: /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0
restart_method: command

[printer]
kinematics: cartesian
max_velocity: 300
max_accel: 2000
max_z_velocity: 5
max_z_accel: 100

[force_move] # pour pouvoir utiliser SET_KINEMATIC_POSITION
enable_force_move: true

[virtual_sdcard]
path: ~/printer_data/gcodes

[bltouch]
sensor_pin: ^PC14
control_pin: PC13
x_offset: -32
y_offset: -40
z_offset: 3.185
probe_with_touch_mode: true
stow_on_each_sample: false
speed: 5                     # probing speed of 5mm/second ideal is <10mm/sec  
samples: 2                   # number of probes to perform per sample
samples_result: average      # normalization method: see config reference
sample_retract_dist: 3.0
samples_tolerance: 0.02
samples_tolerance_retries: 3

[bed_mesh]
speed: 120
mesh_min: 20, 20
mesh_max: 200, 197
probe_count: 4,4
algorithm: bicubic


[gcode_macro MAGIC_BEDMESH]
description : check si la mesh a cette temperature existe, si oui elle la charge et on attend que le bed atteigne cette temperature, sinon elle va etablir la mesh a cette temperature, puis reboot. Usage : MAGIC_BEDMESH S=(temperature)
gcode:
  {% set mypause = printer["gcode_macro MyPause"] %}
  G90  # absolute positioning coordinates
  {% if params.S is defined %}
    {% set S = params.S|float|round|int|string %}
    {% set temp_bed = params.S|float|round|int %}
    {% if temp_bed != 0 %}
      {% set STRR = "bed_mesh meshbed_" + S + "deg" %}
      {% if printer.configfile.config[STRR] is defined %}
        M104 S100       # Start heating extruder without waiting for it
        M106 S64        # set fan at 45/255
        M190 S{S} # wait for bed to reach temperature
        # SET_SKEW CLEAR=1
        G28
        BED_MESH_PROFILE LOAD=meshbed_{S}deg
      {% else %}
        {action_respond_info("Pas de mesh pour cette temperature, donc lancement d'un _AUTO_BED_MESH_CALIBRATE")}
        _AUTO_BED_MESH_CALIBRATE S={S} D=0
      {% endif %}
    {% endif %}
  {% else %}
    {action_raise_error("Merci de definir une temperature")}
  {% endif %}



[safe_z_home]
home_xy_position: 152, 167
# le Xmilieu qui vaut 120, on lui ajoute 32 de X offset de sonde, et hop ca fait 152
# le Ymilieu qui vaut 127, on lui ajoute 40 de Y offset de sonde, et hop ca fait 167
speed: 75
z_hop: 10
z_hop_speed: 5
move_to_previous: false

[filament_switch_sensor e0_sensor]
switch_pin: !PC15
pause_on_runout: true
runout_gcode: PAUSE

[pause_resume]
recover_velocity: 25

[bed_screws]
screw1: 20, 29
screw2: 195, 29
screw3: 195, 198
screw4: 20, 198

[pause_resume]



##################################### c'est la guerre ci-dessous ############################################


# # code a foutre dans SS en debut d'impression
# # ; HYPERLAPSE ACTION=STOP
# SET_MY_RETRACTION RETRACT_LENGTH={filament_retract_length[0]} RETRACT_SPEED={filament_retract_speed[0]} UNRETRACT_EXTRA_LENGTH={filament_retract_restart_extra[0]} UNRETRACT_SPEED={filament_deretract_speed[0]}
# _BEGINNING_OF_PRINT TEMP_HOTEND={temperature[0]} TEMP_BED_FIRST_LAYER={first_layer_bed_temperature[0]}

# SET_GCODE_OFFSET Z_ADJUST={filament_Z_offset} MOVE=1 MOVE_SPEED=5

# ; code a mettre entre les objets pour tester le bon Zoffset :
# ; SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1 MOVE_SPEED=5



[gcode_macro MyPause]
description: config vars for pausing print or resume or endprint 
## @TODO Replace the coordinates to suit your printer
variable_position_centre:  [ 120, 127 ]
variable_move_speed_customzoffset:  120
variable_ep_cale_customzoffset:  0.2
variable_mypause_waiting:  [ 10, 100 ]
variable_mypause_changingfilament:       [ 10, 100 ]
variable_mypause_end_of_print:       [ 5, 90 ]
variable_change_filament_spot:       [ 96, 36, 100 ] # usefull to purge filament here too, CAD to design purge box + silicon
variable_retract_pause_length: 3.0
variable_extrude_restart_length: 3.0
variable_retract_end_of_print_length: 3.0
variable_end_of_print_z_height: 30
variable_position_min_brush:      [ 31, 14 ] # Xmin et Ymin
variable_position_max_brush:      [ 70, 19 ] # Xmax et Ymax
variable_position_after_rubbing : [ 80, 59 ] # Xmax et Ymax
variable_x_offset_rubbing_on_brush:  10 # la buse va plus loin que la brosse a dent de cette valeur
variable_brush_wipe_count: 2 # WARNING : cette valeur doit etre superieure ou egale a 2
variable_brush_quick_wipe_count: 2 # WARNING : cette valeur doit etre superieure ou egale a 2
# SPEED in mm/s
variable_move_speed_beginning_printing:       120
variable_move_speed_waiting:       120
variable_move_speed_changingfilament:      120
variable_move_speed_end_of_print:    120
variable_move_speed_z:       15
variable_move_speed_retraction_pause: 60
variable_move_speed_extrusion_restart: 60
variable_move_speed_brush_rubbing : 100
## internal state variables; not for configuration!
variable_batch_mode_enabled: False
gcode:
    RESPOND TYPE=command MSG="{ printer['gcode_macro MyPause'] }"



[gcode_macro SET_MY_RETRACTION]
gcode:
  {% set SLICER = params.SLICER|string %}
  {% set R_L = params.RETRACT_LENGTH|float %}
  {% set R_S = params.RETRACT_SPEED|float %}
  {% set U_E_L = params.UNRETRACT_EXTRA_LENGTH|float %}
  {% set U_S = params.UNRETRACT_SPEED|float %}
  M221 S100
  SET_RETRACTION RETRACT_LENGTH={R_L} RETRACT_SPEED={R_S} UNRETRACT_EXTRA_LENGTH={U_E_L} UNRETRACT_SPEED={U_S}


# Macro to perform a bed mesh calibration
[gcode_macro BED_MESH_CALIBRATE] # THIS MACRO DROPS THE PROBE AFTER USE
rename_existing:    BED_MESH_CALIBRATE_ORIGINAL
gcode:
  # SET_SKEW CLEAR=1
  G90
  G28
  BED_MESH_CALIBRATE_ORIGINAL
  G0 Z25 F600           ; raise bed to 25


[gcode_macro HOME_LVL_MESH]
gcode:
  G28
  BED_MESH_CALIBRATE # this macro does a home inside itself AND drops the probe


[gcode_macro _AUTO_BED_MESH_CALIBRATE]
description: _AUTO_BED_MESH_CALIBRATE S={temperature du bed} [D=0, pour ne pas drop la sonde],  le firmware restart dans a la fin de cette macro
gcode:
  G90  # absolute positioning coordinates
  {% set S = params.S|float|round|int %}
  M190 S{S} # wait for bed to reach temperature
  # SET_SKEW CLEAR=1
  G28
  BED_MESH_CALIBRATE_ORIGINAL PROFILE=meshbed_{S}deg   # etablit la mesh pour cette temperature et le stocke dans le fichier de config
  G0 Z25 F600           # raise bed to 25
  SAVE_CONFIG  # le firmware restart ici


[gcode_macro MAGIC_BEDMESH]
description : check si la mesh a cette temperature existe, si oui elle la charge et on attend que le bed atteigne cette temperature, sinon elle va etablir la mesh a cette temperature, puis reboot. Usage : MAGIC_BEDMESH S=(temperature)
gcode:
  G90  # absolute positioning coordinates
  {% if params.S is defined %}
    {% set S = params.S|float|round|int|string %}
    {% set temp_bed = params.S|float|round|int %}
    {% if temp_bed != 0 %}
      {% set STRR = "bed_mesh meshbed_" + S + "deg" %}
      {% if printer.configfile.config[STRR] is defined %}
        M104 S100       # Start heating extruder without waiting for it
        M106 S64        # set fan at 45/255
        M190 S{S} # wait for bed to reach temperature
        # SET_SKEW CLEAR=1
        G28
        BED_MESH_PROFILE LOAD=meshbed_{S}deg
      {% else %}
        {action_respond_info("Pas de mesh pour cette temperature, donc lancement d'un _AUTO_BED_MESH_CALIBRATE")}
        _AUTO_BED_MESH_CALIBRATE S={S} D=0
      {% endif %}
    {% endif %}
  {% else %}
    {action_raise_error("Merci de definir une temperature")}
  {% endif %}





############################################## DEBUT IMPRESSION ##############################################
[gcode_macro _BEGINNING_OF_PRINT]
description: _BEGINNING_OF_PRINT TEMP_HOTEND= TEMP_BED_FIRST_LAYER=
gcode:
  {% set mypause = printer["gcode_macro MyPause"] %}
  {% set temp_hotend = params.TEMP_HOTEND|float %}
  {% set temp_bed_first_layer = params.TEMP_BED_FIRST_LAYER|float %}
  BED_MESH_CLEAR
  # SET_SKEW CLEAR=1
  SET_GCODE_OFFSET Z=0
  # HYPERLAPSE ACTION=STOP
  CANCEL_FAN_OVERRIDE
  M105 ; report temperatures
  M140 S{temp_bed_first_layer} ; set BED temp WITHOUT waiting
  # G28 STAY        # pour avoir des valeurs non abérantes au cas où je doive annuler l'impression ET GARDE LA SONDE ICI 
  MAGIC_BEDMESH S={temp_bed_first_layer} # ici on a drop la sonde avec le MAGIC_BEDMESH (le dernier G28 dans la macro du MAGIC_BEDMESH)
  # A TOI GUD DE FAIRE CE SKEW QD T'EN RESSENTIRAS LE BESOIN, et il faudra activer ca : [skew_correction]
  # SKEW_PROFILE LOAD=bertha
  M300 S500 P40
  G90             # absolute positioning coordinates
  M83             # relative extrusion mode
  M300 S600 P40
  G1 X{ mypause.change_filament_spot[0] } Y{ mypause.change_filament_spot[1] } F{ mypause.move_speed_beginning_printing*60|float }
  # M104 S{temp_hotend} ; set extruder temp WITHOUT waiting
  M109 S{temp_hotend} ; WAIT for extruder to reach temp before proceeding, put it before
  M300 S800 P40
  G1 Z2 F{ mypause.move_speed_z*60|float }        # lift
  # G1 X20 Y10 F{ mypause.move_speed_beginning_printing*60|float }
  M83
  M106 S0
  # G1 Z5 F{ mypause.move_speed_z*60|float }        # lift
  # G1 X5 Y36
  # G1 Z0.45 F{ mypause.move_speed_z*60|float }     # get ready to prime
  # G1 Y156 E30 F600   # prime nozzle
  # G1 Y186 F5000      # quick wipe ;M221 S100 ; (percentage flow)




[gcode_macro _END_PRINT]
gcode:
  {% set mypause = printer["gcode_macro MyPause"] %}
  TURN_OFF_HEATERS    # turn off heaters...
  BED_MESH_CLEAR
  M106 S64
  SAVE_GCODE_STATE NAME=END_state
  M83                 # set relative extrusion
  G92 E0              # reset extrusion amount
  G1 E-3 F4000        # retract 3mm
  G1 E-{ mypause.retract_end_of_print_length|float } F{ mypause.move_speed_retraction_pause*60|float }
  # move the toolhead out of the way
  # if the tool is less than 30mm away from Z Max, move it to Z max, otherwise, move Z up 30mm
  # Obtain the Z axis limit from the [stepper_z] section of the config file and make
  # a decision where to move the Z axis based on the current toolhead 
  {% if printer.toolhead.position.z|float + mypause.end_of_print_z_height >= printer.configfile.config["stepper_z"]["position_max"]|float %}
    G90                  # set absolute positioning
    M83                  # set relative for the extruder (extruder was affected by the G90 that's why M83 is added)
    G1 Z{printer.configfile.config["stepper_z"]["position_max"]|float} F{ mypause.move_speed_z*60|float } ;Move tool
  {% else %}
    G91                  # set relative positioning
    G1 Z{ mypause.end_of_print_z_height|float } F{ mypause.move_speed_z*60|float }         # move Z axis up the value wanted
  {% endif %}
  RESTORE_GCODE_STATE NAME=END_state
  M221 S100
  G90                  # set absolute positioning
  M83                  # set relative for the extruder (extruder was affected by the G90 that's why M83 is added)
  G0 X{ mypause.mypause_end_of_print[0] } Y{ mypause.mypause_end_of_print[1] } F{ mypause.move_speed_end_of_print*60|float }    # park tool at back of printer
  # TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=10 MAXIMUM=90 # Wait until the given temperature sensor is at or above the supplied MINIMUM and/or at or below the supplied MAXIMUM
  # M107                 # Fan off    
  #UNLOAD_FILAMENT     # this is a good spot to call an unload 
                        # filament macro, if you are into that sort of thing
  SET_GCODE_OFFSET Z=0 # reset whatever babystepping you have done
  # SET_SKEW CLEAR=1
  CLEAR_PAUSE          # clear whatever PAUSE state you may have if you have it
  CANCEL_FAN_OVERRIDE
  # M117 DONE!!!        # print a message on your LCD
  SONNERIE_FIN


  ##################################################################
  # pour pause les impressions


[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
gcode:
  {% set mypause = printer["gcode_macro MyPause"] %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{ mypause.retract_pause_length|float } F{ mypause.move_speed_retraction_pause*60|float }
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F{ mypause.move_speed_z*60|float }
    G90 # absolute positioning coordinates
    M83 # set relative for the extruder (extruder was affected by the G90 that's why M83 is added)
    G0 X{ mypause.mypause_waiting[0] } Y{ mypause.mypause_waiting[1] } F{ mypause.move_speed_waiting*60|float }
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

# ===================================================
[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  {% set mypause = printer["gcode_macro MyPause"] %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {% else %}
    {% set get_params = ('VELOCITY=' + ((mypause.move_speed_waiting*60|float)|string)) %} # default value for velocity
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{ mypause.extrude_restart_length } F{ mypause.move_speed_extrusion_restart*60|float }
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  RESUME_BASE {get_params}


[gcode_macro AUX_SONDE_A_LA_PLACE_DE_LA_BUSE]
description: Executer cette macro et ensuite envoyer des G1 X... Y... et comme ca on voit si la sonde peut aller a ces endroits la. Tres utile pour les options de BED_MESH (mesh_min et mesh_max). Retour a la normale en executant la macro AUX_RESTAURE_BUSE. Precision : les coordonnees affiches sur mainsail en gros (la ou cest habituellement), seront les vraies coordonnees de la sonde.
gcode:
  SAVE_GCODE_STATE NAME=BUSE_MODE
  {% set offsetX = -1*printer.configfile.config["bltouch"]["x_offset"] | float %}
  {% set offsetY = -1*printer.configfile.config["bltouch"]["y_offset"] | float %}
  SET_GCODE_OFFSET MOVE=1 X={offsetX} Y={offsetY} MOVE_SPEED=100 # en mm/s
  # RESTORE_GCODE_STATE MOVE=1 NAME=NORMAL_MODE MOVE_SPEED=100 # en mm/s


[gcode_macro AUX_RESTAURE_BUSE]
gcode:
  RESTORE_GCODE_STATE MOVE=0 NAME=BUSE_MODE MOVE_SPEED=100 # en mm/s
  {% set offsetX2 = 1*printer.configfile.config["bltouch"]["x_offset"] | float %}
  {% set offsetY2 = 1*printer.configfile.config["bltouch"]["y_offset"] | float %}
  G91
  G1 X{offsetX2} Y{offsetY2} F6000
  G90

  # {% set mypause = printer["gcode_macro MyPause"] %}
  # {% set xcentre = mypause.position_centre[0]|float %}
  # {% set ycentre = mypause.position_centre[1]|float %}
  # {% set move_speed = mypause.move_speed_customzoffset|float|int %}
  # G1 X{xcentre} Y{ycentre} F{move_speed*60|float}

[gcode_macro _center_buse]
gcode:
  G28
  {% set mypause = printer["gcode_macro MyPause"] %}
  {% set xcentre = mypause.position_centre[0]|float %}
  {% set ycentre = mypause.position_centre[1]|float %}
  {% set move_speed = mypause.move_speed_customzoffset|float|int %}
  G1 X{xcentre} Y{ycentre} F{move_speed*60|float}


[gcode_macro CUSTOM_ZOFFSET]
description: centre la buse, puis mets la sonde a la place de la buse, puis sonde, set le Z a 0 puis remet la buse au centre, et la il faudra ensuite descendre le Z de sorte a toucher la feuille de papier OU LA CALE, et la valeur en Z donnera la valeur opposee quon affectera au Zoffset de la sonde
gcode:
  {% set mypause = printer["gcode_macro MyPause"] %}
  {% set safe_z = printer.configfile.config["bltouch"]["sample_retract_dist"] | float %}
  {% set speed_z = printer.configfile.config["bltouch"]["speed"] | float | int %}
  _center_buse
  AUX_SONDE_A_LA_PLACE_DE_LA_BUSE
  PROBE
  SET_KINEMATIC_POSITION Z=0
  G1 Z{safe_z} F{speed_z*60|float}
  AUX_RESTAURE_BUSE


#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 18.511
#*# pid_ki = 0.894
#*# pid_kd = 95.793
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 68.385
#*# pid_ki = 1.281
#*# pid_kd = 912.935
